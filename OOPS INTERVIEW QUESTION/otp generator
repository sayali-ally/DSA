#include <iostream>
#include <unordered_map>
#include <string>
#include <ctime>

using namespace std;

class OTPService {
private:
    struct OTPEntry {
        string otp;
        time_t createdAt;
    };

    unordered_map<string, OTPEntry> store;
    int expirySeconds;

    string getKey(const string& userId, const string& serviceId) {
        return userId + ":" + serviceId;
    }

    bool isExpired(time_t generated, time_t now) {
        return difftime(now, generated) > expirySeconds;
    }

    string generateRandomOtp() {
        string otp = "";
        srand(time(0));
        for (int i = 0; i < 6; i++) {
            otp += to_string(rand() % 10);
        }
        return otp;
    }

public:
    OTPService(int expiry = 300) : expirySeconds(expiry) {}

    string generateOtp(const string& userId, const string& serviceId) {
        string key = getKey(userId, serviceId);
        string otp = generateRandomOtp();
        time_t now = time(0);

        store[key] = {otp, now};
        return otp;
    }

    bool validateOtp(const string& inputOtp, const string& userId, const string& serviceId) {
        string key = getKey(userId, serviceId);
        time_t now = time(0);

        if (store.find(key) == store.end()) return false;

        OTPEntry entry = store[key];

        if (isExpired(entry.createdAt, now)) {
            store.erase(key);  // cleanup expired OTP
            return false;
        }

        return entry.otp == inputOtp;
    }

    void forceExpire(const string& userId, const string& serviceId) {
        string key = getKey(userId, serviceId);
        store.erase(key);
    }
};
