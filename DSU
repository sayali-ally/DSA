int parent[100001];
int find(int parent[],int i){
  if(parent[i]==i)
  return i;
return find(parent,parent[i]);
}
int merge(int x,int y){
  int a=parent[x];
  int b=parent[y];
  if(a!=b){
  parent[a]=b;
  }
}
find Number of provinces : leetcode 
class Solution {
public:
    int parent[100001];
    int find(int i,int parent[]){
        if(parent[i]==i){
            return i;
        }
        return find(parent[i],parent);
    }
    int findCircleNum(vector<vector<int>>& c) {
        int n=c.size();
        int ans=n;
        for(int i=0;i<n;i++){
            parent[i]=i;
        }

        for(int i=0;i<n;i++){
            for(int j=1;j<n;j++){
                if(c[i][j]==1){
                    int x=find(i,parent);
                    int y=find(j,parent);
                    if(x!=y){
                        parent[x]=y;
                        ans--;
                    }
                }
            }
        }
        return ans;
    }
};








class UnionFind {
    vector<int> parent, size;
public:
    UnionFind(int n) {
        parent.resize(n); size.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i; size[i] = 1;
        }
    }
    int find(int x) {
        if (x == parent[x]) return x;
        return parent[x] = find(parent[x]); // Path compression
    }
    bool Union(int u, int v) {
        int pu = find(u), pv = find(v);
        if (pu == pv) return false; // Return False if u and v are already union
        if (size[pu] > size[pv]) { // Union by larger size
            size[pu] += size[pv];
            parent[pv] = pu;
        } else {
            size[pv] += size[pu];
            parent[pu] = pv;
        }
        return true;
    }
};
