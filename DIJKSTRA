dijkstra 

public:
Graph(int V);
void addEdge();
void shortestPath(int s)

Graph::Graph(int V){
    this->V=V;
    adj=new list<iPair>[V];
}
void Graph::addEdge(int u,int v,int w){
    adj[u].push_back(make_pair(v,w));
    adj[v].push_back(make_pair(u,w));
}
void Graph::shortestPath(int s){
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    vector<int>dist(V,1e9);
    dist[s]=0;
    pq.push(0,s);  //dist,node
    while(!pq.empty()){
        auto it=pq.top();
        int curr=it.second;
        pq.pop();

        for(auto it:adj[curr]){
            int neighNode=it.first;
            int neighWeight=it.second;
            if(dist[curr]+neighWeight<dist[neighNode]){
                dist[neighNode]=dist[curr]+neighWeight;
                pq.push({dist[neighNode],neighNode});
            }
        }
    }
    for(int i=0;i<V;i++){
        cout<<dist[i]<<" ";
    }
}


time complexity- O(E*log(v))
