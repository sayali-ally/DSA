lower_bound -> >=    O(logn)
lower_bound is used to find the first element in the map whose value is either equal  to or greater than the given key.

map<int,string>mp = {{1,"geeks"},{2,"geeks2"},{3,"geeks3"}};
auto it=mp.lower_bound(2);

cout<<it->first<<" "<<it->second<<" ";
2 geeks

USES THE SEARCH OPERATION OF MAP CONTAINER WHICH IS INTERNALLY IMPLEMENTED AS SELF-BALANCING BINARY SEARCH TREE.

map<int,char>mp={{10,'a'},{20,'b'},{30,'c'}};
int k=20;
auto it=mp.lower_bound(k);
cout<<it->first<<":"<<it->second;
20 : b


upper_bound-> >
upper_bound returns an iterator pointing towards the immediate next element which is just greater than k.
map<int,int>mp;
mp.insert({ 12, 30});
mp.insert({ 11, 10 }); 
mp.insert({ 15, 50 }); 
mp.insert({ 14, 40 }); 
auto it=mp.upper_bound(12)
cout<<12 40


Lower bound /upper bound for sorted vectors 
vector<int>v={11, 34, 56, 67, 89}};
cout<<*lower_bound(v.begin(),v.end(),56);   ans-56
cout<<*upper_bound(v.begin(),v.end(),56);   ans-67
O(logn)

for unsorted vectors
vector<int> v = {89, 11, 56, 34, 67};
sort(v.begin(),v.end());
cout << *lower_bound(v.begin(), v.begin() + 3, 30)
cout << *upper_bound(v.end() - 3, v.end(), 30);



lower_bound/upper_bound can be used on sorted ranges only, internally maps are sorted by its keys.


Lower_bound/upper_bound on sets
set<int> s = {1, 5, 3, 7, 6};
cout<< *s.lower_bound(4)   ans:5

set<string> s = {"hello", "geeks","welcome"};
cout<< s.lower_bound("code")
ans: "geeks"
O(log)

Lower_bound/upper_bound on vector of pairs
vector<pair<int,int>>vec={ { 1, 3 }, { 1, 7 }, { 2, 4 },
            { 2, 5 }, { 3, 8 }, { 8, 6 } };

pair<int,int>p={2,5}
auto l=lower_bound(vec.begin(),vec.end(),p);
cout<<index<<l-vec.begin();










