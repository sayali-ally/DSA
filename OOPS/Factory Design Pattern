Factory Design Pattern 
#include<iostream>
using namespace std;
//base class
class Vehicle{
    public:
    virtual void showType()=0;
    virtual ~Vehicle() {}
};

//derived class car
class Car:public Vehicle{
    public:
    void showType() override{
        cout<<"this is a car";
    }
};

//derived class bike
class Bike:public Vehicle{
    public:
    void showType() override{
        cout<<"this is a bike";
    }
};

//create factory class to create vehicle objects 
class VehicleFactory{
    public:
    static Vehicle* CreateVehicle(string type){
        if(type=="Car"){
            return new Car();
        }else if(type=="Bike"){
            return new Bike();
        }else{
            return nullptr;
        }
    }
};

//client code using the factory
int main(){
    Vehicle* v1=VehicleFactory::CreateVehicle("Car");
    Vehicle* v2=VehicleFactory::CreateVehicle("Bike");

    if(v1) v1->showType();
    if(v2) v2->showType();
    delete v1;
    delete v2;
    return 0;
}

output:
this is a car
this is a bike

The client (main()) never uses new Car() or new Bike() directly, making the code flexible.
