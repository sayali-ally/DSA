1. will be done using dp 

class Solution {
public:
    int helper(int x,int y,vector<vector<int>>& matrix,vector<vector<int>>&dp){
        int m=matrix.size();
        int n=matrix[0].size();
        int rw[4]={-1,0,1,0};
        int cw[4]={0,1,0,-1};
        int res=0;
        if(dp[x][y]!=-1)
        return dp[x][y];
        for(int i=0;i<4;i++){
            int nr=rw[i]+x;
            int nc=cw[i]+y;
            if(nr>=0 && nc>=0 && nr<m && nc<n && matrix[nr][nc]>matrix[x][y]){
                res=max(res,1+helper(nr,nc,matrix,dp));
            }
        }
        return dp[x][y]=res;
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        int ans=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                ans=max(ans,helper(i,j,matrix,dp));
            }
        }
        return ans+1;
    }
};

// dp.    
// -1 -1 -1 
// -1 -1 -1
// -1 -1 -1

// matrix
// 9 9 4
// 6 6 8
// 2 1 1
