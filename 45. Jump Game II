Greedy approach to find minimum jumps needed to reach the end 

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        if(n==1)return 0;
        int farthest=0;
        int current_end=0;
        int jumps=0;
        for(int i=0;i<n;i++){
            farthest=max(farthest,i+nums[i]);
            if(i==current_end){
                jumps++;

                current_end=farthest;
                if(current_end>=n-1)
                return jumps;
            }
        }
        return 0;
    }
};
