
class Solution {
public:
    int manhaDis(vector<int>&v1,vector<int>&v2){
        return abs(v1[0]-v2[0])+abs(v1[1]-v2[1]);
    }
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n=points.size();
        vector<vector<pair<int,int>>>adj(n);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                adj[i].push_back({j,manhaDis(points[i],points[j])});
                adj[j].push_back({i,manhaDis(points[i],points[j])});
            }
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,0});
        vector<bool>vis(n,0);
        int cost=0;
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int weight=it.first;
            int node=it.second;

            if(vis[node])continue;
            vis[node]=true;
            cost+=weight;
            for(auto it:adj[node]){
                int adjNode=it.first;
                int adjwei=it.second;
                if(!vis[adjNode]){
                    pq.push({adjwei,adjNode});
                }
            }
        }
        return cost;
    }
};
