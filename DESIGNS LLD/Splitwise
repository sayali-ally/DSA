Splitwise Design

enum class ExpenseType {EQUALLY,SHARES,PERCENTAGE};
class User{
    int id;
    string name;
    string email;
};
class Split{
    double amount;
    User*user;
};
class Expense{
    vector<Split*>splits;
    int paid_by;
    double amount;
    int expense_id;
    virtual void calculateSplits()=0;
};
class splitEqually:public Expense{
    void calculateSplits() override{
    int n=splits.size();
    double splitAmount=amount/n;
    for(auto &split:splits){
        split->amount=splitAmount;
    }
    }
};
class splitByPercentage:public Expense{
    vector<int>percentages;
    vector<int>amt;
    void calculateSplits() override{
    for(int i=0;i<n;i++){
        amt[i]=percentages[i]*amount/100;
    }
    for(auto &split:splits){
        split->amount=amt[i]
    }
    }
};
class splitByRatio:public Expense{

};
class splitByShares:public Expense{

};
class ExpenseManager{
    unordered_map<int,User*>users;
    unordered_map<int,double>balances;   

    void addUser(User*user){
        users[user->id]=user;
    }
    void addExpense(ExpenseType type,int paid_by,double amount,vector<User*>users,vector<int>percentages={},vector<int>shares={}){
        vector<Split*>splits;
        for(auto&user:users){
            splits.push_back(new Split(user,0.0));
        }
        if(type==ExpenseType::EQUALLY){
            Expense*expense=new splitEqually();
        }else if(type==ExpenseType::SHARES){
            Expense*expense=new splitByRatio();
        }else if(type==ExpenseType::PERCENTAGE){
            Expense*expense=new splitByPercentage();
        }
        if(expense){
            expense->calculateSplits();
            for(auto&split: expense->splits){
                balances[split->user_id]-=split->amount;
            }
            balances[expense->paid_by->id]+=split->amount;
        }

    }
    void showBalances(){
        for(auto&it:balances){
            if(it.second!=0){
                cout<<users[it.first]<<" "<<it.second<<endl;
            }
        }
    }
};
int main(){
    ExpenseManager mgr;
    User* user1=new User("1","Alice");
    User* user2=new User("2","Bob");
    User* user3=new User("3","charles");

    mgr.addUser(user1);
    mgr.addUser(user2);
    mgr.addUser(user3);

    vector<Split*>splits={new Split(user2,0),new Split(user3,0)};
    Expense* expense=new EqualExpense("E1",user1,300,splits);
    mgr.addExpense(expense);
    mgr.showBalances();
    return 0;
}
