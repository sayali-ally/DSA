A child class should be able to replace its parent class without breaking the application.

Voilation
class Bird {
public:
    virtual void fly() {
        cout << "Bird is flying" << endl;
    }
};

class Penguin : public Bird {
public:
    void fly() override { 
        throw logic_error("Penguins can't fly!"); 
    }
};


Modification
class Bird {
public:
    virtual void makeSound() {
        cout << "Bird sound" << endl;
    }
};

class FlyingBird : public Bird {
public:
    virtual void fly() {
        cout << "Bird is flying" << endl;
    }
};

class Sparrow : public FlyingBird {};
class Penguin : public Bird {};  // Now it doesn't break LSP
