Step 1: Define the Requirements
Functional Requirements:

Users should be able to request an elevator from any floor.
Users should be able to select a floor inside the elevator.
The elevator should move efficiently based on requests.
The system should handle multiple elevators.
There should be safety measures (max weight, emergency stop).
Non-Functional Requirements:

The system should be scalable for multiple elevators in a building.
The system should be fault-tolerant (handle failures gracefully).
The elevator movement should be optimized to reduce waiting time.
Step 2: Identify the Key Classes
Before writing code, we need to define the main classes.
Here are some key ones:

Elevator: Represents an elevator, stores its current status and handles movement.
ElevatorSystem: Manages multiple elevators and dispatches requests.
FloorRequest: Represents a request made from a floor.
InternalRequest: Represents a request made inside the elevator.
Scheduler: Decides the optimal movement strategy.



enum direction {UP,DOWN,IDLE}
class Request{
    direction dir;
    int floor;
}

class Elevator{
    int id;
    direction dir;
    int currentfloor;
    vector<Request>requests;

    void addRequest(int floor,direction dir){
        requests.push_back(Request(dir,floor));
    }

    void move(){
        if(requests.empty()){
            direction=IDLE;
            return;
        }

        Request nextRequest=requests[0];
        if(currentfloor<nextRequest.floor){
            direction=UP;
            currentfloor++;
        }else if(currentfloor>nextRequest.floor){
            direction=DOWN;
            currentfloor--;
        }
        if(currentfloor==nextRequest.floor){
            requests.erase(requests.begin());
        }
    }
}


class ElevatorSystem{
    vector<Elevator>elevetors;
    void requestElevator(int floor,direction dir){
        int bestElevator=0;
        int min=abs(elevetors[0].currentfloor-floor);
        for(int i=0;i<elevetors.size();i++){
            int dist=(elevetors[i].currentfloor-floor);
            if(dist<min){
                min=dist;
                bestElevator=i;
            }
        }
    }
}
