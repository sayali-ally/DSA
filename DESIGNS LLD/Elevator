Step 1: Define the Requirements
Functional Requirements:

Users should be able to request an elevator from any floor.
Users should be able to select a floor inside the elevator.
The elevator should move efficiently based on requests.
The system should handle multiple elevators.
There should be safety measures (max weight, emergency stop).
Non-Functional Requirements:

The system should be scalable for multiple elevators in a building.
The system should be fault-tolerant (handle failures gracefully).
The elevator movement should be optimized to reduce waiting time.
Step 2: Identify the Key Classes
Before writing code, we need to define the main classes.
Here are some key ones:

Elevator: Represents an elevator, stores its current status and handles movement.
ElevatorSystem: Manages multiple elevators and dispatches requests.
FloorRequest: Represents a request made from a floor.
InternalRequest: Represents a request made inside the elevator.
Scheduler: Decides the optimal movement strategy.



enum direction {UP,DOWN,IDLE}
class Request{
    direction dir;
    int floor;
}

class Elevator{
    int id;
    direction dir;
    int currentfloor;
    vector<Request>requests;

    void addRequest(int floor,direction dir){
        requests.push_back(Request(dir,floor));
    }

    void move(){
        if(requests.empty()){
            direction=IDLE;
            return;
        }

        Request nextRequest=requests[0];
        if(currentfloor<nextRequest.floor){
            direction=UP;
            currentfloor++;
        }else if(currentfloor>nextRequest.floor){
            direction=DOWN;
            currentfloor--;
        }
        if(currentfloor==nextRequest.floor){
            requests.erase(requests.begin());
        }
    }
}

class ElevatorSystem {
public:
    vector<Elevator> elevators;

    ElevatorSystem(int numElevators) {
        for (int i = 0; i < numElevators; i++) {
            elevators.push_back(Elevator(i, 0));  // Initialize all elevators at floor 0
        }
    }

    void requestElevator(int floor, direction dir) {
        int bestElevator = -1;
        int minDistance = INT_MAX;

        for (int i = 0; i < elevators.size(); i++) {
            int dist = abs(elevators[i].currentFloor - floor);

            if (elevators[i].isIdle() || 
                (dir == UP && elevators[i].currentFloor < floor) || 
                (dir == DOWN && elevators[i].currentFloor > floor)) {
                if (dist < minDistance) {
                    minDistance = dist;
                    bestElevator = i;
                }
            }
        }

        if (bestElevator != -1) {
            elevators[bestElevator].addRequest(floor, dir);
        }
    }

    void stepSimulation() {
        for (Elevator &e : elevators) {
            e.move();
        }
    }
};

int main() {
    ElevatorSystem system(3);

    system.requestElevator(5, UP);
    system.requestElevator(2, DOWN);

    for (int i = 0; i < 10; i++) {  // Simulate 10 time steps
        system.stepSimulation();
    }

    return 0;
}
