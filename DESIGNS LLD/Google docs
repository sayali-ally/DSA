Google doc design 
1. multiple users collaborating on the doc 
2. real-time editing 
3. version history 
4. User roles (editor, viewer, owner)

// User Class
class User {
public:
    int userId;
    string name;
    string email;
    unordered_map<int, string> permissions; // docId -> permission (VIEW, EDIT, OWNER)
    
    User(int id, string n, string e) : userId(id), name(n), email(e) {}
    
    bool canEdit(int docId) { return permissions[docId] == "EDIT" || permissions[docId] == "OWNER"; }
    bool canView(int docId) { return permissions.find(docId) != permissions.end(); }
};

// Document Class
class Document {
public:
    int docId;
    string content;
    User* owner;
    unordered_map<int, string> permissions; // userId -> permission
    
    vector<string> versionHistory;
    
    Document(int id, string text, User* creator) : docId(id), content(text), owner(creator) {
        permissions[creator->userId] = "OWNER";
        versionHistory.push_back(content);
    }
    
    void updateContent(string newContent) {
        versionHistory.push_back(content); // Save current version before updating
        content = newContent;
    }
    
    void grantAccess(User* user, string permission) {
        permissions[user->userId] = permission;
    }
    
    string getPreviousVersion(int versionIndex) {
        if (versionIndex >= 0 && versionIndex < versionHistory.size())
            return versionHistory[versionIndex];
        return "Invalid Version!";
    }
};
class Userhistory{
    int userId;
    string content;
    string time_edit;

    void displayUserHistory(){
        cout<<"This doc was edited by":userId<<"at time"<<time_edit<<endl;
    }
};
class CollaborationManager{
    unordered_map<int,Document>documents;
    int docCounter=1;
    int createDocument(string title,string content,int ownerId){
        Document doc(docCounter, title, content, ownerId);
        documents[docCounter]=doc;
        docCounter++;
    }
    Document* getDocument(int docId){
        if(documents.find(docId)!=documents.end()){
            return documents[docId];
        }
        return nullptr;
    }
};
int main(){
    CollaborationManager manager;
    User alice(101,"ALice");
    User bob(102,"Bob");
    User charles(102,"charles");

    int id=manager.createDocument("","",alice.userId);
    Document* doc=manager.getDocument(docId);

    doc->grantAccess();
    doc->editContent();
    doc->viewDocument();
    return 0;
}
