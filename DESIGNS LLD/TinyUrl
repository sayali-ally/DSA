Tiny Url

features:
1. shorten Url
2. expand Url
3. click tracking
4. handle url expiry 
5. handles concurrency 

#inculde<bit/stdc++.h>
#include<mutex>
using namespace std;

#include <iostream>
#include <unordered_map>
#include <string>
#include <ctime>

using namespace std;

class TinyURL {
private:
    unordered_map<string, pair<string, time_t>> shortToLong; // Maps short URL to {long URL, timestamp}
    unordered_map<string, string> longToShort; // Maps long URL to short URL
    string characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    int counter = 0;
    const int EXPIRATION_TIME = 30 * 24 * 60 * 60; // 30 days in seconds

    // Convert an integer to Base62 encoded string
    string encodeBase62(int num) {
        string shortUrl;
        while (num > 0) {
            shortUrl = characters[num % 62] + shortUrl;
            num /= 62;
        }
        while (shortUrl.length() < 6) shortUrl = "a" + shortUrl; // Ensure 6 characters
        return shortUrl;
    }

public:
    // Shorten a long URL with timestamp
    string shorten(string longUrl) {
        if (longToShort.find(longUrl) != longToShort.end()) {
            return "tinyurl.com/" + longToShort[longUrl];
        }

        string shortUrl = encodeBase62(counter++);
        time_t currentTime = time(0); // Get current timestamp
        shortToLong[shortUrl] = {longUrl, currentTime};
        longToShort[longUrl] = shortUrl;

        return "tinyurl.com/" + shortUrl;
    }

    // Expand a short URL and check expiration
    string expand(string shortUrl) {
        string key = shortUrl.substr(shortUrl.find_last_of("/") + 1);
        
        if (shortToLong.find(key) == shortToLong.end()) {
            return "URL not found!";
        }

        time_t currentTime = time(0);
        time_t creationTime = shortToLong[key].second;

        if (difftime(currentTime, creationTime) > EXPIRATION_TIME) {
            shortToLong.erase(key);
            longToShort.erase(shortToLong[key].first);
            return "URL expired!";
        }

        return shortToLong[key].first;
    }
};

int main() {
    TinyURL tinyurl;
    
    string shortUrl1 = tinyurl.shorten("https://www.example.com/long-url-1");
    string shortUrl2 = tinyurl.shorten("https://www.example.com/long-url-2");
    
    cout << "Shortened URL 1: " << shortUrl1 << endl;
    cout << "Shortened URL 2: " << shortUrl2 << endl;

    cout << "Expanded URL 1: " << tinyurl.expand(shortUrl1) << endl;
    cout << "Expanded URL 2: " << tinyurl.expand(shortUrl2) << endl;

    return 0;
}
