#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;

class LRUCache {
private:
    int capacity;
    list<pair<int, int>> cacheList; // Stores (key, value)
    unordered_map<int, list<pair<int, int>>::iterator> cacheMap; // Key -> List iterator
    
public:
    LRUCache(int cap) { capacity = cap; }

    int get(int key) {
        if (cacheMap.find(key) == cacheMap.end()) return -1;
        
        // Move the accessed node to the front (Most Recently Used)
        cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]);
        return cacheMap[key]->second;
    }

   void put(int key, int value) {
        if (cacheMap.find(key) != cacheMap.end()) {
            // Key exists, update value and move to front
            cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]);
            cacheMap[key]->second = value;
            return;
        }

        // If cache is full, remove the least recently used element (from back)
        if (cacheList.size() == capacity) {
            int lruKey = cacheList.back().first;
            cacheMap.erase(lruKey);
            cacheList.pop_back();
        }

        // Insert new key-value pair at front
        cacheList.push_front({key, value});
        cacheMap[key] = cacheList.begin();
    }
};
