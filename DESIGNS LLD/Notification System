Notification Handler 
enum class NotificationType{SMS,PUSH,EMAIL};
enum class NotificationStatus{SEND,FAILED,PENDING};
class User{
    int id;
    string name;
    string email;
    string phoneno;
    unordered_set<NotificationType>optedInNotifications;
    void optIn(NotificationType type){
        optedInNotifications.insert(type);
    }
    void optOut(NotificationType type){
        optedInNotifications.erase(type);
    }
    bool canRecieve(NotificationType type){
        return (optedInNotifications.find(type)!=NotificationTypee.end());
    }
};
class Notification{
    int id;
    string message;
    int user_id;
    NotificationType type;
    NotificationStatus status;
    time_t timestamp;

    bool isDelivered(){
        return status==NotificationStatus::SEND;
    }
    bool failed(){
        return status==NotificationStatus::FAILED;
    }
    bool isPending(){
        return status==NotificationStatus::PENDING;
    }
    virtual void sendNotification()=0;
};
class SMSNotification:public Notification{
    void sendNotification() override{
        cout<<"Notification send to"<<user_id<<message<<end;
        status=NotificationStatus::SENT;
    }
};
class EmailNotification:public Notification{
    void sendNotification() override{
        cout<<
    }
};
class PushNotification:public Notification{

};
class NotificationFactory{
    static Notification* createNotification(int user_id,string message,NotificationType type){
        switch(type):
        case NotificationType::EMAIL: return new EmailNotification();
        case NotificationType::PUSH: return new PushNotification();
        case NotificationType::SMS: return new SMSNotification();
    }
};
class NotificationMgr{
    queue<Notification*>notifications;
    unordered_map<int,User*>users;
    void addUser(User*user){
        users[user->id]=user;
    }
    bool sendNotification(int user_id,NotificationType type,string message){
        if(users.find(user_id)==users.end()){
            cout<<"user not found"<<endl;
            return false;
        }
        User*user=users[user_id];
        if(!user->canRecieve(type)){
            cout<<"User has opted out for this notification type";
        }
        Notification*notification=NotificationFactory::createNotification(user_id,message,type);
        if(notification){
            notification.sendNotification();
            notifications.push(notification);
            return true;
        }
        return false;
    }
};
